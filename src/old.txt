
    loop {
        // Read line
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("Error while reading string.");

        // Clean input up
        input = input.replace("\r", "");
        input = input.replace("\n", "");

        // Separate input into commands
        let mut command: Vec<&str> = input.split(' ').collect();

        println!("Command is: {:?}\n", command);

        // Match input
        match command[0] {
            // Quit on Q
            "q" | "Q" | "quit" => {break},
            // Mute on M
            "m" | "M" | "mute" => {
                if sink.volume() > 0.0 {
                    sink.set_volume(0.0);
                    println!("(i) Muted.\n")
                }
                else {
                    sink.set_volume(1.0);
                    println!("(i) Unmuted.\n")
                }

            },
            "v" | "V" | "volume" => {
                if command.len() >= 2 {
                    sink.set_volume(match command[1].parse() {
                        Ok(x) => clamp(x, 0.0, 1.0),
                        Err(_) => sink.volume(),
                    });
                   println!("(i) Volume set to {}\n", sink.volume())
                };
            },
            "p" | "P" | "play" => {
                if command.len() >= 2{
                    let file = File::open(command[1]);
                    match file {
                        Ok(f) => {
                            println!("(i) {:?} queued. \n", f);
                            sink.append(Decoder::new(BufReader::new(f)).unwrap());

                        }
                        Err(_) => {
                            println!("(!) Couldn't open file.\n")
                        }
                    }

                }
            },
            "h" | "H" | "help" | "HELP" | "what" => {
                println!("q/Q/quit -- quits the program");
                println!("m/M/mute -- mutes playback");
                println!("v/V/volume (vol) -- changes volume to vol(0.0-1.0)");
                println!("p/P/play (path) -- loads file at path (w/o spaces)\n");
            }
            _ => ()
        }
    }